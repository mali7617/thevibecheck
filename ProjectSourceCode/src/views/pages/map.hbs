<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Google Maps Search with Mood Filter</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }

  .search-mood-bar {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 10px 20px;
  margin-top: 10px;
}


    .search-bar {
      display: flex;
      align-items: center;
      width: 100%;
      max-width: 1000px;
      height: -400px;
    }
    .search-bar input {
      flex-grow: 1;
      padding: 8px 12px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 14px;
      outline: none;
      transition: box-shadow 0.3s ease;
    }

    .search-bar input:focus {
      box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .search-bar button {
      padding: 8px 15px;
      margin-left: 10px;
      border: none;
      border-radius: 5px;
      background-color: #4a90e2;
      color: white;
      font-weight: bold;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .search-bar button:hover {
      background-color: #357ab7;
    }

  
    .mood-bar {
      display: flex;
      flex-direction: column;
      justify-content: start;
      align-items: center;
      gap: 10px;
      padding: 20px;
      background-color: rgba(0, 0, 0, 0);
      position: fixed;
      top: 60px;
      left: 0;
      height: calc(100vh - 60px);
      width: 150px;
      z-index: 10;
    }

   
    .mood-bar button {
      width: 100%;
      padding: 10px 0;
      border-radius: 5px;
      font-size: 14px;
      font-weight: bold;
      color: white;
      cursor: pointer;
      border: none;
      transition: transform 0.2s ease, background-color 0.3s ease;
      text-align: center;
    }

    .mood-bar button:hover {
    transform: scale(1.1);
  }

  #adventureButton {
    background-color: #4682b4; 
    color: white;
  }

  #cozyButton {
    background-color: #3cb371; 
    color: white;
  }

  #livelyButton {
    background-color: #ffa500;
    color: white;
  }

  #romanceButton {
    background-color: #dc143c; 
    color: white;
  }

  #hungryButton {
    background-color: #4b0082;
    color: white;
  }

  #relaxButton {
    background-color: #7b68ee; 
    color: white;
  }

  #artisticButton {
    background-color: #9400d3; 
    color: white;
  }

  #culturalButton {
    background-color: #4e4e8b; 
    color: white;
  }

  #festiveButton {
    background-color: #ff4500; 
    color: white;
  }

  #celebrateButton {
    background-color: #ff69b4; 
    color: white;
  }

  #wellnessButton {
    background-color: #df98fb; 
    color: white;
  }

  #sportButton {
    background-color: #1e90ff; 
    color: white;
  }

  #educationalButton {
    background-color: #ffd700; 
    color: black;
  }

  #tiredButton {
    background-color: #808080; 
    color: white;
  }

  #socialButton {
    background-color: #ff6347; 
    color: white;
  }
  
    #map-container {
      margin-left: 150px; 
      margin-top: 5px; 
      width: calc(100% - 150px); 
      height: calc(100vh - 60px ); 
    }

    #map {
      width: 100%;
      height: 100%;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
  </style>
</head>

  <!-- Search Bar -->
  <div class="search-mood-bar">
    <div class="search-bar">
      <input type="text" id="searchInput" placeholder="Search...">
      <button>Search</button>
    </div>
  </div>
  

  <!-- Mood Bar on the Left -->
  <div class="mood-bar">
    <button id="adventureButton">Adventure</button>
    <button id="cozyButton">Cozy</button>
    <button id="livelyButton">Lively</button>
    <button id="romanceButton">Romantic</button>
    <button id="hungryButton">Hungry</button>
    <button id="relaxButton">Relaxed</button>
    <button id="artisticButton">Artistic</button>
    <button id="culturalButton">Cultural</button>
    <button id="festiveButton">Festive</button>
    <button id="celebrateButton">Celebration</button>
    <button id="wellnessButton">Wellness</button>
    <button id="sportButton">Sports</button>
    <!--<button id="educationalButton">Educational</button>
    <button id="tiredButton">Tired</button>
    <button id="socialButton">Social</button>-->

  </div>

  <!-- Map -->
  <div id="map-container">
    <div id="map"></div>
  </div>
</body>
</html>

  <script>
    var map;
    var service;
    var infowindow;
    var autocomplete;
    var markers = [];

    
    function initMap() {
      // Begin in Boulder, Colorado
      var boulder = new google.maps.LatLng(40.015, -105.2705);
      infowindow = new google.maps.InfoWindow();
      map = new google.maps.Map(document.getElementById('map'), {
        center: boulder,
        zoom: 13
      });

      // Initialize autocomplete on search input
      var inputField = document.getElementById('searchInput');
      autocomplete = new google.maps.places.Autocomplete(inputField, {
        fields: ['name', 'geometry']
      });

      // Add listener for autocomplete selection
      autocomplete.addListener('place_changed', function () {
        var place = autocomplete.getPlace();
        if (place.geometry) {
          makeNearbySearch(place.name);
        }
      });

        document.querySelectorAll('.mood-bar button').forEach(button => {
    button.addEventListener('click', function () {
      const mood = button.textContent.toLowerCase(); 
      makeNearbySearch("boulder", mood);
    });
  });
}


   
    function makeNearbySearch(searchKey, mood = '') {
      var boulder = new google.maps.LatLng(40.015, -105.2705);

      var request = {
        location: boulder,
        radius: 80000, 
        keyword: `${searchKey} ${mood}`

      };

      var service = new google.maps.places.PlacesService(map);
      service.nearbySearch(request, function (results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          clearMarkers(); 
          var bounds = new google.maps.LatLngBounds(); 

          for (var i = 0; i < results.length; i++) {
            createMarker(results[i], bounds);
          }

          
          map.fitBounds(bounds);
        } else {
          console.error('REQUEST ERROR:', status);
        }
      });
    }

    // Function to create markers and extend bounds
    function createMarker(place, bounds) {
      if (!place.geometry || !place.geometry.location) {
        console.error("Location is undefined for place:", place);
        return;
      }

      var marker = new google.maps.Marker({
        map: map,
        position: place.geometry.location
      });

      markers.push(marker);

      // Extend the bounds to include each marker's location
      bounds.extend(place.geometry.location);

      google.maps.event.addListener(marker, 'click', function () {
        infowindow.setContent(place.name);
        infowindow.open(map, this);
      });
    }

    // Function to clear existing markers
    function clearMarkers() {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
      }
      markers = [];
    }

    // Function to dynamically load the Google Maps API
    function loadGoogleMapsAPI(apiKey) {
      var script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap&libraries=places`;
      script.async = true;
      script.defer = true;
      document.body.appendChild(script);
    }

    // Fetch the API key and load Google Maps
    fetch('/api/get-google-maps-key')
      .then(response => response.json())
      .then(data => {
        loadGoogleMapsAPI(data.apiKey);
      })
      .catch(error => {
        console.error('Error fetching API key:', error);
      });
  </script>
</body>